#!/usr/bin/env python3
import argparse
import atexit
import fcntl
import os
import subprocess
import sys
import time
from datetime import datetime

VERSION = "1.0.2"
LOCK_DIR = "/tmp/orun"
g_lock_files = {}


def log_message(message, is_error=False):
    """带时间戳的日志记录函数"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    prefix = "[orun]"
    stream = sys.stderr if is_error else sys.stdout
    print(f"{timestamp} {prefix} {message}", file=stream)


def get_gpu_count():
    """使用 nvidia-smi 获取系统中的GPU总数"""
    try:
        output = (
            subprocess.check_output(
                ["nvidia-smi", "--query-gpu=count", "--format=csv,noheader,nounits"]
            )
            .decode("utf-8")
            .strip()
        )
        return int(output)
    except (FileNotFoundError, subprocess.CalledProcessError, ValueError):
        log_message(
            "无法执行 'nvidia-smi' 或解析其输出。请确保NVIDIA驱动和工具已正确安装。",
            is_error=True,
        )
        sys.exit(1)


def release_locks():
    """释放所有已获取的GPU锁"""
    global g_lock_files
    if not g_lock_files:
        return
    for gpu_id, f in g_lock_files.items():
        try:
            fcntl.flock(f, fcntl.LOCK_UN)
            f.close()
        except IOError:
            pass
    g_lock_files.clear()


def acquire_gpus(num_required, specific_gpus=None):
    """
    循环尝试获取指定数量或指定ID的GPU卡。
    这是一个阻塞操作，直到获取成功为止。
    """
    global g_lock_files

    total_gpus = get_gpu_count()
    if specific_gpus:
        for gpu_id in specific_gpus:
            if gpu_id >= total_gpus:
                log_message(
                    f"指定的GPU ID {gpu_id} 超出系统GPU总数 {total_gpus}。",
                    is_error=True,
                )
                sys.exit(1)

    while True:
        candidate_gpus = (
            specific_gpus if specific_gpus is not None else list(range(total_gpus))
        )

        acquired_gpus = []
        temp_lock_files = {}

        for gpu_id in candidate_gpus:
            lock_path = os.path.join(LOCK_DIR, f"gpu{gpu_id}.lock")
            try:
                f = open(lock_path, "w")
                fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
                acquired_gpus.append(gpu_id)
                temp_lock_files[gpu_id] = f
                if len(acquired_gpus) == num_required:
                    break
            except IOError:
                f.close()
                continue

        if len(acquired_gpus) == num_required:
            g_lock_files = temp_lock_files
            log_message(f"成功获取GPU: {acquired_gpus}")
            return acquired_gpus
        else:
            for f in temp_lock_files.values():
                fcntl.flock(f, fcntl.LOCK_UN)
                f.close()
            log_message(
                f"当前可用GPU不足 ({len(acquired_gpus)}/{num_required})，10秒后重试..."
            )
            time.sleep(10)


def main():
    parser = argparse.ArgumentParser(
        description="Orun - 一个简单的GPU任务调度工具",
        formatter_class=argparse.RawTextHelpFormatter,
        usage="orun [options] -- your_command [args...]",
    )
    parser.add_argument("--version", action="version", version=f"orun {VERSION}")
    parser.add_argument(
        "-n", "--num-gpus", type=int, default=1, help="需要占用的GPU卡数量。默认为1。"
    )
    parser.add_argument(
        "-g",
        "--gpus",
        type=str,
        help='指定要使用的GPU卡ID，用逗号分隔，例如 "0,3"。如果设置此项，则忽略-n。',
    )
    parser.add_argument(
        "-b",
        "--background",
        action="store_true",
        help="后台运行任务，类似sbatch。会自动生成日志文件，并立即返回shell。",
    )
    parser.add_argument(
        "command", nargs=argparse.REMAINDER, help="要执行的命令及其参数。"
    )

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        log_message("未提供要执行的命令。", is_error=True)
        sys.exit(1)

    if args.command[0] == "--":
        args.command = args.command[1:]
        if not args.command:
            parser.print_help()
            log_message("'--' 之后未提供要执行的命令。", is_error=True)
            sys.exit(1)

    os.makedirs(LOCK_DIR, exist_ok=True)
    atexit.register(release_locks)

    num_required = args.num_gpus
    specific_gpus = None
    if args.gpus:
        try:
            specific_gpus = [int(g) for g in args.gpus.split(",")]
            num_required = len(specific_gpus)
        except ValueError:
            log_message(
                f"无效的GPU ID格式 '{args.gpus}'。请使用逗号分隔的数字。", is_error=True
            )
            sys.exit(1)

    acquired_gpu_ids = acquire_gpus(num_required, specific_gpus)

    os.environ["CUDA_VISIBLE_DEVICES"] = ",".join(map(str, acquired_gpu_ids))

    if args.background:
        # 后台模式，创建守护进程
        if os.fork() > 0:
            sys.exit(0)
        os.setsid()
        if os.fork() > 0:
            sys.exit(0)

        # 孙子进程（守护进程）继续执行
        job_pid = os.getpid()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_filename = os.path.abspath(f"orun-job{job_pid}-{timestamp}.log")

        # 在父进程退出前，先向原始终端打印关键信息
        log_message(f"PID: {job_pid}, Log: {log_filename}")

        # 重定向守护进程的输出到日志文件
        sys.stdout.flush()
        sys.stderr.flush()
        with open(log_filename, "a") as log_file:
            os.dup2(log_file.fileno(), sys.stdout.fileno())
            os.dup2(log_file.fileno(), sys.stderr.fileno())

        # 守护进程作为“监工”执行并等待命令完成
        try:
            proc = subprocess.Popen(args.command)
            proc.wait()  # 等待命令结束
        except Exception as e:
            log_message(f"后台任务(PID:{job_pid})执行失败: {e}", is_error=True)
        finally:
            # 确保守护进程退出前释放锁 (atexit在这里可能不可靠)
            release_locks()
            sys.exit(0)
    else:
        # 前台模式
        try:
            subprocess.run(args.command, check=True)
        except subprocess.CalledProcessError as e:
            print("-" * 40, file=sys.stderr)
            # 命令执行失败，返回非零退出码
            sys.exit(e.returncode)
        except KeyboardInterrupt:
            # 用户通过Ctrl+C中断
            print("\n" + "-" * 40)
            log_message("任务被用户中断 (Ctrl+C)。")
            sys.exit(1)
        except FileNotFoundError:
            log_message(f"命令 '{args.command[0]}' 未找到。", is_error=True)
            sys.exit(127)


if __name__ == "__main__":
    main()
